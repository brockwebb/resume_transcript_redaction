# detection_patterns.yaml
# Purpose: Define regex patterns for entity detection
# Location: app/config/patterns/detection_patterns.yaml
# Note: All paths are relative to app directory

# Personal Identifiers
# Handles various forms of personal identification including names, pronouns, and titles
personal:
  - entity_type: "PERSON_NAME"
    name: "full_name"
    regex: "\\b[A-Z][a-z]+(?:\\s+(?:[A-Z](?:\\.|[a-z]+)\\s+)?[A-Z][a-z]+)+\\b"
    score: 0.7
    examples: ["John A. Smith", "Mary Jane Wilson"]

  - entity_type: "PERSON_NAME"
    name: "hyphenated_name"
    regex: "\\b[A-Z][a-z]+(?:-[A-Z][a-z]+)+\\b"
    score: 0.7
    examples: ["Smith-Jones", "Garcia-Williams"]

  - entity_type: "PRONOUN_LABEL"
    name: "pronouns_with_label"
    regex: "\\b(?:Pronouns?:?\\s+)?(?:they/them|he/him|she/her|ze/zir|xe/xem)\\b"
    score: 0.9
    examples: ["Pronouns: they/them", "she/her"]

  - entity_type: "PRONOUN_LABEL"
    name: "pronouns_parenthetical"
    regex: "\\((?:they/them|he/him|she/her|ze/zir|xe/xem)\\)"
    score: 0.9
    examples: ["(they/them)", "(she/her)"]

  - entity_type: "TITLE"
    name: "professional_title"
    regex: "\\b(?:Dr|Mr|Mrs|Ms|Mx|Prof)\\.?\\s+[A-Z][a-z]+\\b"
    score: 0.8
    examples: ["Dr. Smith", "Prof. Johnson"]

# Contact Information
# Comprehensive patterns for various forms of contact details
contact:
  - entity_type: "PHONE"
    name: "phone_us_standard"
    regex: "\\(?\\d{3}\\)?[-.]?\\s*\\d{3}[-.]?\\s*\\d{4}"
    score: 0.9
    examples: ["(123) 456-7890", "123.456.7890"]

  - entity_type: "PHONE"
    name: "phone_with_extension"
    regex: "\\(?\\d{3}\\)?[-.]?\\s*\\d{3}[-.]?\\s*\\d{4}\\s*(?:ext|x|ext\\.)?\\s*\\d{1,5}"
    score: 0.9
    examples: ["(123) 456-7890 ext 123", "123.456.7890 x12"]

  - entity_type: "PHONE"
    name: "phone_international"
    regex: "\\+\\d{1,3}[-.]?\\s*\\(?\\d{1,3}\\)?[-.]?\\s*\\d{3,4}[-.]?\\s*\\d{4}"
    score: 0.9
    examples: ["+1 (123) 456-7890", "+44 20 7123 4567"]

  - entity_type: "EMAIL"
    name: "email_address"
    regex: "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b"
    score: 0.9
    examples: ["user@domain.com", "first.last@company.co.uk"]

  - entity_type: "URL"
    name: "website_url"
    regex: "\\b(?:https?://)?(?:www\\.)?[\\w-]+(?:\\.[\\w-]+)+(?:/[\\w\\-\\./?%&=]*)?\\b"
    score: 0.8
    examples: ["https://website.com", "domain.co.uk/path"]

  - entity_type: "SOCIAL_MEDIA"
    name: "linkedin_url"
    regex: "\\b(?:https?://)?(?:www\\.)?linkedin\\.com/(?:in|pub|profile)/[\\w-]+/?\\b"
    score: 0.8
    examples: ["linkedin.com/in/username", "www.linkedin.com/in/user-name"]

  - entity_type: "SOCIAL_MEDIA"
    name: "github_profile"
    regex: "\\b(?:https?://)?(?:www\\.)?github\\.com/[\\w-]+/?\\b"
    score: 0.8
    examples: ["github.com/username", "https://github.com/user"]

  - entity_type: "SOCIAL_MEDIA"
    name: "twitter_handle"
    regex: "\\B@[A-Za-z0-9_]{1,15}\\b"
    score: 0.8
    examples: ["@username", "@user_name"]

# Temporal Information
# Patterns for dates, ranges, and time-related information
temporal:
  - entity_type: "DATE"
    name: "date_full"
    regex: "\\b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\\s+\\d{1,2}(?:st|nd|rd|th)?,?\\s+\\d{4}\\b"
    score: 0.9
    examples: ["January 1st, 2020", "Dec 31, 2021"]

  - entity_type: "DATE"
    name: "date_month_year"
    regex: "\\b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\\s+\\d{4}\\b"
    score: 0.9
    examples: ["January 2020", "Dec 2021"]

  - entity_type: "DATE"
    name: "date_range"
    regex: "\\b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\\s+\\d{4}\\s*[-–—]\\s*(?:(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\\s+\\d{4}|Present|present|Current|current)\\b"
    score: 0.9
    examples: ["January 2020 - Present", "Dec 2019 – Current"]

  - entity_type: "DATE"
    name: "year_only"
    regex: "\\b(?:19|20)\\d{2}\\b"
    score: 0.7
    examples: ["2020", "1999"]

# Location Information
# Patterns for addresses and geographical information
location:
  - entity_type: "ADDRESS"
    name: "full_address"
    regex: "\\b\\d+\\s+[A-Za-z0-9\\s,]+(?:Street|St|Avenue|Ave|Boulevard|Blvd|Lane|Ln|Road|Rd|Drive|Dr|Court|Ct|Circle|Cir|Way|Parkway|Pkwy)\\s*,?\\s*[A-Za-z\\s]+,\\s*[A-Z]{2}\\s*\\d{5}(?:-\\d{4})?\\b"
    score: 0.9
    examples: ["123 Main St, City, ST 12345", "456 Park Ave, Town, CA 12345-6789"]

  - entity_type: "ADDRESS"
    name: "city_state"
    regex: "\\b[A-Z][a-zA-Z\\s]+,\\s*[A-Z]{2}\\b"
    score: 0.8
    examples: ["San Francisco, CA", "New York, NY"]

  - entity_type: "ADDRESS"
    name: "state_zip"
    regex: "\\b[A-Z]{2}\\s*\\d{5}(?:-\\d{4})?\\b"
    score: 0.9
    examples: ["CA 94105", "NY 10001-1234"]

# Education Information
# Patterns for academic degrees, institutions, and related information
education:
  - entity_type: "EDUCATION"
    name: "degree_full"
    regex: "\\b(?:Bachelor|Master|Doctor|Ph\\.D|PhD|B\\.S\\.|M\\.S\\.|B\\.A\\.|M\\.A\\.|M\\.B\\.A\\.)\\s+(?:of|in|degree in)\\s+[A-Za-z\\s]+\\b"
    score: 0.8
    examples: ["Bachelor of Science in Computer Science", "Master of Arts in English"]

  - entity_type: "EDUCATION"
    name: "university_name"
    regex: "\\b(?:University|College|Institute|School)\\s+of\\s+[A-Za-z\\s]+\\b"
    score: 0.8
    examples: ["University of California", "College of Engineering"]

  - entity_type: "EDUCATION"
    name: "graduation_info"
    regex: "\\b(?:Class of|Graduated|Graduation:?)\\s+(?:19|20)\\d{2}\\b"
    score: 0.8
    examples: ["Class of 2020", "Graduated: 2019"]

# Identification Numbers
# Patterns for various types of identification numbers
id_numbers:
  - entity_type: "ID_NUMBER"
    name: "student_id"
    regex: "\\b(?:Student\\s*ID:?\\s*|ID#?\\s*)\\d{5,10}\\b"
    score: 0.9
    examples: ["Student ID: 12345678", "ID# 87654321"]

  - entity_type: "ID_NUMBER"
    name: "employee_id"
    regex: "\\b(?:Employee\\s*ID:?\\s*|EID:?\\s*)\\w{2,}\\d{4,}\\b"
    score: 0.9
    examples: ["Employee ID: ABC12345", "EID: XY987654"]

  - entity_type: "ID_NUMBER"
    name: "certification_number"
    regex: "\\b(?:Cert(?:ification)?|License)\\s*#?\\s*[A-Z0-9-]{6,}\\b"
    score: 0.9
    examples: ["Certification #ABC-123456", "License #XY987654"]

# Protected Categories
# Patterns for sensitive personal information and protected class indicators
protected:
  - entity_type: "PROTECTED_CLASS"
    name: "gender_identity"
    regex: "\\b(?:gender|transgender|non-binary|nonbinary|genderqueer|gender-fluid)\\b"
    score: 0.9
    examples: ["transgender", "non-binary"]

  - entity_type: "PROTECTED_CLASS"
    name: "sexual_orientation"
    regex: "\\b(?:LGBTQIA\\+|gay|lesbian|bisexual|queer|questioning|intersex|asexual|ally)\\b"
    score: 0.9
    examples: ["LGBTQIA+", "bisexual"]

  - entity_type: "PROTECTED_CLASS"
    name: "race_ethnicity"
    regex: "\\b(?:African[- ]American|Asian|Hispanic|Latino/a|Latinx|Native American|Pacific Islander|White|Caucasian|Black|Indigenous|BIPOC)\\b"
    score: 0.9
    examples: ["African-American", "Asian"]

  - entity_type: "PROTECTED_CLASS"
    name: "religious_terms"
    regex: "\\b(?:Christian|Muslim|Jewish|Buddhist|Hindu|Sikh|Atheist|Religious|Faith-based)\\b"
    score: 0.9
    examples: ["Christian", "Muslim"]

  - entity_type: "MEDICAL"
    name: "medical_disclosure"
    regex: "\\b(?:disability|accessibility needs|medical condition|health condition|diagnosed with|treatment for)\\b"
    score: 0.9
    examples: ["disability", "medical condition"]

  - entity_type: "MEDICAL"
    name: "accommodation_needs"
    regex: "\\b(?:accommodations?|adaptive|assistive technology|mobility assistance|screen reader|accessible)\\b"
    score: 0.9
    examples: ["accommodation needed", "assistive technology"]

# Professional Information
# Patterns for professional certifications and specialized credentials
professional:
  - entity_type: "CERTIFICATION"
    name: "professional_cert"
    regex: "\\b(?:certified|licensed|registered|accredited)\\s+[A-Za-z\\s]+\\b"
    score: 0.8
    examples: ["Certified Project Manager", "Licensed Engineer"]

  - entity_type: "MEMBERSHIP"
    name: "professional_org"
    regex: "\\b(?:Member|Fellow)\\s+of\\s+(?:the\\s+)?[A-Za-z\\s]+\\b"
    score: 0.8
    examples: ["Member of IEEE", "Fellow of ACM"]

# Note: All patterns should be tested with your specific use cases
# and adjusted based on false positive/negative rates in your data.
# Regular expressions can be modified for precision vs. recall tradeoffs.